AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: TakeNotes serverless web application
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 60
    Tracing: Active
    MemorySize: 1024
    Tags:
      Application: serverless-web-app
  Api:
    Auth:
      UsagePlan:
        UsagePlanName: DailyUsagePlan
        CreateUsagePlan: PER_API
        Description: This will limit 5000 executions per day and throttle executions on 10% of that.
        Quota:
          Limit: 5000
          Period: DAY
        Throttle:
          BurstLimit: 100
          RateLimit: 50
Parameters:
  VersionParam:
    Type: String
    Default: v1
  StageNameParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/StageNameParam
  CognitoDomainName:
    Type: String
    Default: takenotesapp
Resources:
  TakeNotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - "-"
        - - TakeNotes-table-test
          - !Ref AWS::StackName
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  TakeNotesApi:
    Type: AWS::Serverless::Api
    MethodSettings:
      DataTraceEnabled: true
      MetricsEnabled: true
      HttpMethod: "*"
      ResourcePath: !Sub ${VersionParam}/*
      LoggingLevel: INFO
    AccessLogSetting:
      DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}
      Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
    Properties:
      Name: TakeNotesApi
      StageName: !Ref StageNameParam
      TracingEnabled: true
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
  GetTakeNotesUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/getUser
      Handler: app.getUser
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          USE_DYNAMODB_LOCAL: "0"
          DYNAMODB_LOCAL_URI: ""
          REGION: !Ref AWS::Region
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  GetTakeNotesUserWeeks:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/getWeeks
      Handler: app.getWeeks
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          USE_DYNAMODB_LOCAL: "0"
          DYNAMODB_LOCAL_URI: ""
          REGION: !Ref AWS::Region
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}/journal/weeks/
            Method: get
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  GetTakeNotesUserWeekEntries:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/getEntries
      Handler: app.getEntries
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          USE_DYNAMODB_LOCAL: "0"
          DYNAMODB_LOCAL_URI: ""
          REGION: !Ref AWS::Region
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}/journal/weeks/{weekIdx}
            Method: get
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PostTakeNotesUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/postUser/
      Handler: app.postUser
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /users/
            Method: POST
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PostTakeNotesUserEntry:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/postEntry/
      Handler: app.postEntry
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PostEntry:
          Type: Api
          Properties:
            Path: /users/{id}/journal/weeks/{weekIdx}/entries
            Method: POST
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PostTakeNotesUserNotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/postNote/
      Handler: app.postNote
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PostNote:
          Type: Api
          Properties:
            Path: /users/{id}/notes/
            Method: POST
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PutTakeNotesUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/putUser/
      Handler: app.putUser
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PutUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: PUT
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  DeleteTakeNotesUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/deleteUser/
      Handler: app.deleteUser
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: DELETE
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  DeleteTakeNotesUserNotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/deleteNote/
      Handler: app.deleteNote
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        DeleteNote:
          Type: Api
          Properties:
            Path: /users/{id}/notes/{noteIdx}
            Method: DELETE
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  DeleteTakeNotesUserEntry:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/deleteEntry/
      Handler: app.deleteEntry
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        DeleteEntry:
          Type: Api
          Properties:
            Path: /users/{id}/journal/weeks/{weekIdx}/entries/{entryIdx}
            Method: DELETE
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PutTakeNotesUserJournal:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/putJournal/
      Handler: app.putJournal
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PutJournal:
          Type: Api
          Properties:
            Path: /users/{id}/journal
            Method: PUT
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PutTakeNotesUserNotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/putNotes/
      Handler: app.putNotes
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PutNotes:
          Type: Api
          Properties:
            Path: /users/{id}/notes/{noteIdx}
            Method: PUT
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PutTakeNotesUserWeek:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/putWeek/
      Handler: app.putWeek
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PutWeek:
          Type: Api
          Properties:
            Path: /users/{id}/journal/weeks/{weekIdx}
            Method: PUT
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  PutTakeNotesUserWeeksEntry:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/putEntry/
      Handler: app.putEntry
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        PutEntry:
          Type: Api
          Properties:
            Path: /users/{id}/journal/weeks/{weekIdx}/entries/{entryIdx}
            Method: PUT
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  TakeNotesTestRequestGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: takeNotes-src/testRequest/
      Handler: app.testRequest
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TakeNotesTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref TakeNotesTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          ENDPOINT_OVERRIDE: ""
          REGION: !Ref AWS::Region
      Events:
        TestReq:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref TakeNotesApi
            Auth:
              Authorizer: CognitoAuthorizer
  ApiGatewayPushToCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Push logs to CloudWatch logs from API Gateway
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-${TakeNotesApi}
      RetentionInDays: 365
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Sub TakeNotesUsers-${StageNameParam}
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      CallbackURLs:
        - http://localhost:3000/
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join
        - "-"
        - - !Ref CognitoDomainName
          - !Ref AWS::StackName
      UserPoolId: !Ref UserPool
Outputs:
  TakeNotesFunctionApi:
    Description: API Gateway endpoint URL.
    Value: !Sub https://${TakeNotesApi}.execute-api.${AWS::Region}.amazonaws.com/${StageNameParam}
  CognitoID:
    Description: The Cognito UserPool ID
    Value: !Ref UserPool
  CognitoClientID:
    Description: The Cognito UserPool Client ID
    Value: !Ref UserPoolClient
  Region:
    Description: The region env variable
    Value: !Ref AWS::Region
  CognitoDomainName:
    Description: The Cognito Hosted UI Domain Name
    Value: !Join
      - ""
      - - !Ref CognitoDomainName
        - "-"
        - !Ref AWS::StackName
        - .auth.
        - !Ref AWS::Region
        - .amazoncognito.com
